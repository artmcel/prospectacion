/* import() */

/* import() | componentes */

/* webpack/runtime/chunk prefetch trigger */

/* webpack/runtime/create fake namespace object */

/* webpack/runtime/jsonp chunk loading */

/* webpack/runtime/load script */

/* webpack/runtime/publicPath */

/**
  * carga estatica de modulos...
  * 
  * import { saludo } from './services/peticiones';
  */

/**
 * 
 * importamos sweet alert para prueba de oprimizacion con splitChunks...
 * splitChunks: {all}.. separa los librerias importadas y las carga en un archivo vendors....
 * 
 * 
 * 
 */

/**
 * importamos el modulo de forma simple para que no ejecute como funcion, sino hasta que sea llamado en el componentes.js
 * 
 */

/************************************************************************/

/******/

// 0 means "already installed".

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// JSONP chunk loading for javascript

// Return the exports of the module

// The chunk loading function for additional chunks

// The module cache

// The require function

// This file contains only the entry chunk.

// This function allow to reference async chunks

// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// a Promise means "currently loading".

// add "moreModules" to the modules object,

// all chunks have JS

// avoid mem leaks in IE.

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// define __esModule on exports

// define getter functions for harmony exports

// expose the modules object (__webpack_modules__)

// install a JSONP callback for chunk loading

// loadScript function to load a script via script tag

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// no HMR

// no HMR manifest

// no baseURI

// no module.id needed

// no module.loaded needed

// no on chunks loaded

// no preloaded

// object to store loaded and loading chunks

// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.

// setup Promise in chunk cache

// start chunk loading

// then flag all "chunkIds" as loaded and fire callback

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// webpackBootstrap

//cargadinamica

//const logo = () => import(/*webpackChunkName: "componentes" */  './js/componentes');

//const mostrarMensaje = () => import( /* webpackChunkName: "peticiones" */ './services/peticiones' );

//import (/*webpackPreload: true*/ './styles.css');

//import (/*webpackPreload: true*/ 'bootstrap/dist/css/bootstrap.min.css');

//import Swal from 'sweetalert2', add prefetch;

//import _ from 'lodash';

//import(/*webpackPrefetch: true */ 'sweetalert2');
